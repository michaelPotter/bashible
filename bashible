#!/usr/bin/env bash

# bashible
# (c) Jan Molic 2020
# https://github.com/mig1984/bashible

ble_version() {
  echo 0.1.0
}

ble_help() {
  echo "bashible version $(ble_version)"
  echo
  echo "usage: bashible ./script.ble"
  echo
  echo "see also: https://github.com/mig1984/bashible"
  echo
  echo "special exitcodes:"
  echo "  42   already handled failure"
  echo "  43   halt"
  echo "  143  terminated by TERM, QUIT, INT or HUP"
  echo
}

ble_print_start() {
  echo -e "\n\033[1;37;45m ${_BLE_NAV} \033[1;37;44m START \033[0m\n" >&2
}

ble_print_block() {
  echo -e "\n\033[1;37;45m ${_BLE_NAV} \033[1;37;44m $* \033[0m\n" >&2
}

ble_print_task() {
  echo -e "\033[37m - "$*" \033[0m" >&2
}

ble_print_fail() {
  echo -e "\n\033[1;37;45m ${_BLE_NAV} \033[1;37;41m $* \033[0m\n" >&2
}

ble_print_finish() {
  echo -e "\n\033[1;37;45m ${_BLE_NAV} \033[1;37;44m FINISH \033[0m\n" >&2
}

ble_print_continues() {
  echo -e "\033[1;37;45m ${_BLE_NAV} \033[1;37;44m ... \033[0m\n" >&2
}

ble_cd_basedir() {
  cd "${_BASE_DIR}" || fail "can't enter base dir '${_BASE_DIR}'"
}

ble_set_top_variables() {
  set +u
  is_toplevel || fail "use 'run' to run child bashible scripts instead of running them directly!"
  set -u
  export _BLE_LEVEL=0
  export _BLE_NAV=''
  export _BLE_SUPPRESS_ERRORS=0
  export _BLE=` absolute_path "$1" ` # the bashible script itself
  test ` basename "${_BLE}" ` = bashible || fail "the 'basename' command is probably not present"
  export _BLE_DELAYED=$(mktemp) # store commands run at the end
  test ${#_BLE_DELAYED} || fail "_BLE_DELAYED tempfile can not be created, is the 'mktemp' command present?"
  export _BLE_ALREADY=$(mktemp) # store already run commands
  test ${#_BLE_ALREADY} || fail "_BLE_ALREADY tempfile can not be created, is the 'mktemp' command present?"
  _BLE_SUBSHELL_PID=0
}

ble_set_variables() {
  _BLE_ORIG_DIR=` pwd `
  _BLE_DIR=` absolute_path $( dirname "${_BLE}" ) `  # bashible modules reside there
  _BLE_SCRIPT_PATH=`absolute_path "$1"`
  base_dir "`dirname "${_BLE_SCRIPT_PATH}"`"
  _BLE_ORIG_BASE_DIR=${_BASE_DIR}
  let _BLE_LEVEL=${_BLE_LEVEL}+1
  if test ${#_BLE_NAV} -eq 0 ; then
    _BLE_NAV="`basename ${_BLE_SCRIPT_PATH} | sed "s/\.ble\$//" `"
  else
    _BLE_NAV="${_BLE_NAV} -> `basename ${_BLE_SCRIPT_PATH} | sed "s/\.ble\$//" `"
  fi
  _BLE_SKIP=0                      # skipping mode? will be reset on a next block
  _BLE_FINISHED=0                  # to detect unhandled exits (pipefail, errexit)
  _BLE_IN_BLOCK=0
  export _BLE_NAV
  export _BLE_LEVEL
}

ble_exit() {
  _BLE_FINISHED=1
  exit $1
}

ble_do_finish() {
  if (($1==0 || $1==43)); then
    ble_print_finish
  else
    if ((_BLE_FINISHED==0 && $1!=42)); then
      ble_print_fail "Unhandled failure, exit code $1 (PID=$BASHPID, CWD is $PWD)"
      exit 42 # convert to handled
    fi
  fi
}

ble_trap_top_exit() {
  trap "rm \"\${_BLE_ALREADY}\" \"\${_BLE_DELAYED}\"" EXIT
}

ble_trap_exit() {
  trap "ble_do_finish \$?" EXIT
}

ble_trap_termination(){
  trap "
    if is_toplevel && ((\$$==\$BASHPID)); then
      # in the toplevel script and not it's subshell
      if ((_BLE_SUBSHELL_PID)); then
        ble_print_fail \"process terminated, sending TERM to all processes in the process group \${_BLE_SUBSHELL_PID}\"
        trap - SIGHUP SIGINT SIGQUIT SIGTERM
        kill -TERM -\${_BLE_SUBSHELL_PID}
      fi
    fi
    ble_exit 42
    " SIGHUP SIGINT SIGQUIT SIGTERM
}

ble_check_cmd() {
  quiet type "$1" || fail "command '$@' not found (CWD is $PWD)"
}

ble_run_script() {
  local path=$1; shift
  ble_print_start
  _BLE_FINISHED=0
  source "$path"
  # unless it gets here, unhandled exit happened -> the exit handler will react on it because _BLE_FINISHED will be still set to 0
  _BLE_FINISHED=1
}

ble_handle_exitstatus() {
  local ex=$1; shift
  if ((ex==43)); then
    ble_exit 43  # 43 == halt
  elif ((ex>0 && ex!=42 && _BLE_SUPPRESS_ERRORS==0)); then
    ble_print_fail "command '$@' failed with exit code $ex (CWD is $PWD)"
    return 42    # 42 == error handled from now on (no more error messages in parents)
  else
    return $ex   # 0 or another status when errors output is SUPPRESSed
  fi
}

ble_serialize_command() {
  oldIFS=$IFS
  IFS=$'\t'; echo -e "$PWD\t$*"
  IFS=$oldIFS
}

### CORE FUNCTIONS ###

@() {
  if test "$1" = 'when'; then
    if ((_BLE_IN_BLOCK=1)); then
      _BLE_IN_BLOCK=0
      _BLE_SKIP=0      # reset skip mode
    fi
    local ex=0
    shift;
    "$@" || ex=$? # || bypasses errexit
    if ((ex!=0)); then # 'when' did not pass, set the skipping mode
      _BLE_SKIP=1
    fi
  else
    if ((_BLE_IN_BLOCK==1)) && ((_BLE_SKIP==1)); then
      _BLE_SKIP=0
    fi
    _BLE_IN_BLOCK=1
    if ((_BLE_SKIP==0)); then
      ble_cd_basedir
      ble_print_block "$*"
    fi
  fi
}

-() {
  if ((_BLE_SKIP==0)); then

    # -&& for ...
    # -&& while ...
    # -&& continue
    if test $# -eq 0; then
      print_info "-&& in action"
      return 0
    fi

    # - foovar = barvalue
    if test ${#} -gt 1  && test "$2" = "="; then
      ble_print_task "$*"
      var=$1
      shift
      eval "$var=\$*"
      return
    fi

    # - command
    ble_print_task "$*"
    ble_check_cmd "$1"
    local ex=0
    "$@" || ex=$?
    # explicitly do exit, do not rely on set -e which is disabled in subshells (via 'run')
    ble_handle_exitstatus $ex "$@" || ble_exit $?

  else

    # -&& for ... (skipping)
    # -&& while ... (skipping)
    # -&& continue (skipping)
    if test $# -eq 0; then
      return 1
    fi

  fi
}

absolute_path() {
  local path
  if egrep -e '^\s*\//' <<< $1; then
    # $1 is an absolute path or a command (without a path)
    path=$1
  else
    # $1 is a relative path
    path="$(cd $(dirname $1); pwd)/$(basename $1)"
  fi
  test ${#path} -gt 0 || fail "absolute_path empty on '$1'"
  echo "$path"
}

base_dir() {
  _BASE_DIR=`absolute_path "$1"`
  ble_cd_basedir
}

run() {
  (
     ble_set_variables "$1"
     ble_trap_termination
     ble_trap_exit
     set -eu -o pipefail +m
     shopt -s inherit_errexit
     ble_run_script "$@"
  )
  local ex=$?
  if ((ex==0)); then
    test ${#_BLE_NAV} -gt 0 && ble_print_continues
    return 0
  else
    ble_handle_exitstatus $ex "$@"
  fi
}

delayed() {
  ble_serialize_command "$@" >> "${_BLE_DELAYED}" || fail "can't write to _BLE_DELAYED file (${_BLE_DELAYED})"
}


evaluate() {
  eval "$@" || return $? # || bypasses errexit
}

fail() {
  if test $# -eq 0; then
    ble_print_fail "execution failed"
  else
    ble_print_fail $*
  fi
  ble_exit 42
}

finish() {
  if test $# -eq 0; then
    print_info "finishing execution of the script"
  else
    print_info $*
  fi
  ble_exit 0
}


halt() {
  if test $# -eq 0; then
    print_info "halting execution of this script and all parent scripts"
  else
    print_info $*
  fi
  ble_exit 43
}

# but still fails if the command does not exist
ignore_errors() {
  ble_check_cmd "$1"
  local old=${_BLE_SUPPRESS_ERRORS}
  export _BLE_SUPPRESS_ERRORS=1
  "$@" || ble_handle_exitstatus $? "$@" || true
  export _BLE_SUPPRESS_ERRORS=$old
}

is_toplevel() {
  ((_BLE_LEVEL==0))
}

is_empty_dir() {
  local buf
  if buf=` ls -A $1 | wc -l `; then
    ((buf>0))
  else
    ble_handle_exitstatus $? "$@"
  fi
}

is_empty_output() {
  ble_check_cmd "$1"
  local buf
  if buf=` "$@" `; then
    echo "$buf"
    test ${#buf} -eq 0
  else
    ble_handle_exitstatus $? "$@"
  fi
}

is_empty_var() {
  local var=$1
  eval "test \${#$var} -eq 0"
}

not() {
  ble_check_cmd "$1"
  if ! "$@"; then
    local ex=$?
    if ((ex==42 || ex==43)); then
      return $ex
    fi
    return 0
  else
    return 1
  fi
}

# output_to_file foo.txt -1 -2 --append ls /home
output_to_file() {
  local stdout=0
  local stderr=0
  local append=0
  local cnt=0

  local dest=$1; shift
  test "${#dest}" -gt 0 || fail "output_to_file: no destination file specified"

  for i in "$@"; do
  case "$1" in
    -1|--stdout)
      stdout=1
      let cnt=cnt+1
      shift
      ;;
    -2|--stderr)
      stderr=1
      let cnt=cnt+1
      shift
      ;;
    -a|--append)
      append=1
      let cnt=cnt+1
      shift
      ;;
    *) # a command

      ((cnt==0)) && stdout=1 # default if no opts
      local s=''
      local ap=''
      ((append==1)) && ap=">>" || ap=">"
      ((stdout==1)) && s="$s 1$ap\$dest"
      ((stderr==1)) && s="$s 2$ap\$dest"

      ble_check_cmd "$1"
      local ex=0
      eval "\"\$@\" $s" || ex=$?
      ble_handle_exitstatus $ex "$@"
      return $?  # of the handler
      ;;
  esac
  done
}

# output_to_var foobar -1 -2 ignore_errors ls /home
output_to_var() {
  local stdout=0
  local stderr=0
  local cnt=0
  local var=$1; shift

  for i in "$@"; do
  case "$1" in
    -1|--stdout)
      stdout=1
      let cnt=cnt+1
      shift
      ;;
    -2|--stderr)
      stderr=1
      let cnt=cnt+1
      shift
      ;;
    *) # a command

      ((cnt==0)) && stdout=1 # default if no opts
      local s=''
      ((stdout==1 && stderr==1)) && s="2>&1"
      ((stdout==0)) && s="$s 1>/dev/null"

      eval "$var=''" # initialize the variable to prevent unbound variable error if the command fails
      local ex=0
      eval "$var=\` \"\$@\" $s \`" || ex=$?
      eval "print_info \"\$var=\$$var\""
      ble_handle_exitstatus $ex "$@"

      return $? # of the handler
      ;;
  esac
  done
}

orig_dir() {
  cd "${_BLE_ORIG_DIR}"
}

print_error() {
  echo -e "   \033[31m($*)\033[0m" >&2
}

print_warn() {
  echo -e "   \033[31m($*)\033[0m" >&2
}

print_info() {
  echo -e "   \033[32m($*)\033[0m" >&2
}

quiet() {
  "$@" >/dev/null 2>&1 || return $?
}

reset_base_dir() {
  base_dir "${_BLE_ORIG_BASE_DIR}"
}

result() {
  local name=$1; shift
  ble_check_cmd "$1"
  local old=${_BLE_SUPPRESS_ERRORS}
  export _BLE_SUPPRESS_ERRORS=1
  local ex=0
  "$@" || ble_handle_exitstatus $? "$@" || ex=$?
  export _BLE_SUPPRESS_ERRORS=$old
  eval "
    $name() {
      if test \$# -gt 0; then
        test $ex \"\$@\"; # with arguments - to test exitcode
      else
        return $ex        # without - to test boolean
      fi
    }
  "
  return 0
}

unless_already() {
  local cmd=$1; shift
  local path=`absolute_path "$cmd"`
  local scmd=`ble_serialize_command "$path" "$@"`
  if ! grep -q "$scmd" < ${_BLE_ALREADY}; then
    echo "$scmd" >> "${_BLE_ALREADY}" || fail "can't write to _BLE_ALREADY file (${_BLE_ALREADY})"
    if ! "$path" "$@"; then
      ble_handle_exitstatus $? "$@"
    fi
  fi
}

use() {
  for i in "$@"; do
    source "${_BLE_DIR}/bashible.$i.ble" || fail "use: can't load ${_BLE_DIR}/bashible.$i.ble"
  done
}

################
#### START #####
################

# help?
if test "$1" = -h -o "$1" = --help ; then
  ble_help
  exit 0
fi

# no script passed?
if test ${#1} -eq 0; then
  ble_help
  exit 1
fi

# be strict
set -eu -o pipefail

# otherwise set -e is disabled in subprocesses
shopt -s inherit_errexit

# use a new process group
set -m

ble_set_top_variables "$0"
ble_trap_termination
ble_trap_top_exit

# the toplevel script will run on the background (signals will break the "wait", therefore the
# top process can react immediately)
(
  # keep the same process group
  set +m

  ble_set_variables "$1"
  ble_trap_termination
  ble_trap_exit
  ble_cd_basedir

  shift
  ble_run_script "${_BLE_SCRIPT_PATH}" "$@"

  test $? -ne 0 && ble_exit $? # do not use || on the line above, it would disable errexit (still it works well only in the top script)

  # run delayed commands
  # (they will exit immediately on failure unless prefixed by "may_fail")
  if test -s "${_BLE_DELAYED}"; then
    export _BLE_NAV='DELAYED'
    ble_print_start
    IFS=$'\n'; while read line; do
      readarray -d $'\t' -t ary <<< $line
      cd "${ary[0]}"      # original CWD
      ary=("${ary[@]:1}") # shift
      - "${ary[@]}"       # run the command with arguments via '-'
    done < "${_BLE_DELAYED}"
    ble_print_finish
  fi

) &
_BLE_SUBSHELL_PID=$!
wait -n
_BLE_SUBSHELL_PID=0
ble_exit $?
